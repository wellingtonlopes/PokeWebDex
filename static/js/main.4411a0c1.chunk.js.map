{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/ErrorBoundary.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","type","sprite","className","src","alt","map","element","CardList","pokemons","monster","i","key","forms","types","sprites","front_default","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","searchChange","placeholder","onChange","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchfield","target","value","require","getPokemonsList","limit","offset","then","response","urls","results","result","url","Promise","all","u","fetch","responses","res","json","monsters","filteredPokemons","filter","pokemon","toLowerCase","includes","length","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4411a0c1.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\nimport './_colors.scss'\n\nfunction Card({ name, type, sprite }) {\n    return (\n        <div className=\"tc w5 bg-red dib br3 pa3 ma2 dim bw2 shadow-5 pointer\">\n            <div className=\"flex flex-column items-center\">\n                <img src={sprite} className='bg-light-yellow br-100 ba b--black-10' alt={`${name}`}/>             \n                <h2 className=\"bg-yellow br1 ma2 pa2\">{name}</h2>\n                <div className=\"h3 flex flex-column justify-center\">\n                    {type.map(element => {\n                        switch(element) {\n                            case 'water':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-water\">{element}</p>\n                            case 'grass':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-grass\">{element}</p>\n                            case 'poison':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-poison\">{element}</p>\n                            case 'fire':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-fire\">{element}</p>\n                            case 'flying':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-flying\">{element}</p>\n                            case 'bug':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-bug\">{element}</p>\n                            case 'fighting':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-fighting\">{element}</p>\n                            case 'normal':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-normal\">{element}</p>\n                            case 'dragon':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-dragon\">{element}</p>\n                            case 'rock':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-rock\">{element}</p>\n                            case 'ground':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-ground\">{element}</p>\n                            case 'electric':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-electric\">{element}</p>\n                            case 'psychic':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-psychic\">{element}</p>\n                            case 'ghost':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-ghost\">{element}</p>\n                            case 'fairy':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-fairy\">{element}</p>\n                            case 'dark':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-dark\">{element}</p>\n                            case 'steel':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-steel\">{element}</p>\n                            case 'ice':\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-ice\">{element}</p>\n                            default:\n                                return <p className=\"ma1 br2 ba b--black-30 pa1 bg-default\">{element}</p>\n                        }\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React, {Fragment} from 'react';\nimport Card from './Card';\n\nfunction CardList({ pokemons }) {\n    return (\n        <Fragment>\n            {\n                pokemons.map((monster, i) => {\n                    return (\n                    <Card \n                        key={i}\n                        name={monster.forms[0].name}\n                        type={monster.types.map( type => type.type.name)}\n                        sprite={monster.sprites.front_default}\n                    />);\n                })\n            }\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React, { Component }from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops, something wrong is not right.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <Fragment>\n            <div className='pa2'>\n                <input\n                    className='pa3 ba tc b--green bg-lightest-blue' \n                    type=\"search\" \n                    placeholder=\"Search PokÃ©mons\"\n                    onChange={searchChange} \n                />\n            </div>\n        </Fragment>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'700px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport CardList from '../Components/CardList';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemons: [],\n            searchfield:''\n        }\n     }\n  \n  componentDidMount() {\n    const interval = {\n      limit: 150,\n      offset: 1\n    }\n    const Pokedex = require('pokedex-promise-v2');\n    const P = new Pokedex();\n    P.getPokemonsList(interval)\n    //.then(response => this.setState({ pokemons: response.results }));\n    .then(response => {\n        const urls = response.results.map(result => result.url);\n        \n        Promise.all(urls.map(u => fetch(u)))\n        .then(responses => Promise.all(responses.map(res => res.json())))\n        .then(monsters => {\n            this.setState({ pokemons: monsters });\n        });\n    });\n  }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { pokemons, searchfield } = this.state;\n        const filteredPokemons = pokemons.filter(pokemon => pokemon.forms[0].name.toLowerCase().includes(searchfield.toLowerCase()));\n      \n        if (!pokemons.length) {\n            return <h1 className='tc pv7'>Loading...</h1>\n        } else {\n            return (\n                <Fragment>\n                    <div className='tc'>\n                        <div className=\"flex items-center justify-center\">\n                            <h1 className='f1 pa3 w6 br2 ba b--dark-red bg-yellow ma2'>PokeWebDex</h1>\n                        </div>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundary>\n                                <CardList pokemons={filteredPokemons}/>\n                            </ErrorBoundary>\n                        </Scroll>\n                    </div>\n                    <footer class=\"pv4 ph3 ph5-m ph6-l mid-gray\">\n                            <small class=\"f6 db tc\">Â© 2020 Made by <b class=\"ttu\">Wellington Lopes</b></small>\n                    </footer>\n                </Fragment>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}